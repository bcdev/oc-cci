/*
 * Copyright (C) 2015 Brockmann Consult GmbH (info@brockmann-consult.de)
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 3 of the License, or (at your option)
 * any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, see http://www.gnu.org/licenses/
 */

package org.esa.beam.occci;

import com.google.common.geometry.S2Cell;
import com.google.common.geometry.S2CellId;
import com.google.common.geometry.S2CellUnion;
import com.google.common.geometry.S2LatLng;
import com.google.common.geometry.S2Polygon;
import com.google.common.geometry.S2RegionCoverer;
import com.vividsolutions.jts.geom.Coordinate;
import com.vividsolutions.jts.geom.Geometry;
import com.vividsolutions.jts.geom.GeometryFactory;
import com.vividsolutions.jts.geom.LinearRing;
import com.vividsolutions.jts.geom.MultiPolygon;
import com.vividsolutions.jts.geom.Polygon;
import com.vividsolutions.jts.io.ParseException;
import com.vividsolutions.jts.io.WKTReader;
import com.vividsolutions.jts.simplify.TopologyPreservingSimplifier;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by marcoz on 23.09.15.
 */
public class MerisCoverageMain {
    // MERIS
    static String poly = "POLYGON ((-63.7593879699707 70.86112213134766, -67.58770751953125 70.54391479492188, -71.28394317626953 70.14901733398438, -74.82946014404297 69.68093872070312, -78.21137237548828 69.14459228515625, -81.42155456542969 68.54488372802734, -84.45772552490234 67.88716125488281, -87.32086944580078 67.1764144897461, -90.0150146484375 66.41740417480469, -92.35752868652344 67.59700012207031, -94.93873596191406 68.74021911621094, -97.78971099853516 69.8409423828125, -100.94397735595703 70.89183807373047, -104.43753051757812 71.88412475585938, -108.30316925048828 72.807861328125, -112.57007598876953 73.65148162841797, -117.25750732421875 74.40203857421875, -122.3692855834961 75.04518127441406, -127.88176727294922 75.56694030761719, -133.74151611328125 75.95381164550781, -139.861328125 76.19449615478516, -146.12413024902344 76.2807846069336, -152.3938751220703 76.21029663085938, -158.53439331054688 75.98538208007812, -164.426025390625 75.61327362060547, -169.97669982910156 75.10455322265625, -175.1304931640625 74.47301483154297, -179.86236572265625 73.73295593261719, 175.82749938964844 72.89838409423828, 171.92250061035156 71.98216247558594, 168.39276123046875 70.99629211425781, 165.2047882080078 69.95101928710938, 162.32376098632812 68.85508728027344, 159.7167510986328 67.7158203125, 157.35140991210938 66.53959655761719, 155.1993408203125 65.33168029785156, 153.2353057861328 64.09645080566406, 151.4375457763672 62.83753204345703, 149.78594970703125 61.55809783935547, 148.26365661621094 60.260765075683594, 146.8558807373047 58.94772720336914, 145.5501708984375 57.62083053588867, 144.3349609375 56.28171920776367, 143.2006378173828 54.93174743652344, 142.13870239257812 53.572105407714844, 141.14195251464844 52.203773498535156, 140.2036590576172 50.82766342163086, 139.3181915283203 49.44453811645508, 138.48046875 48.05507278442383, 137.68621826171875 46.65983963012695, 136.93133544921875 45.259368896484375, 136.21237182617188 43.854122161865234, 135.5261688232422 42.44450759887695, 134.87010192871094 41.03087615966797, 134.24151611328125 39.61357116699219, 133.6382293701172 38.1928825378418, 133.05821228027344 36.76906967163086, 132.49969482421875 35.34236526489258, 131.96099853515625 33.913002014160156, 131.4406280517578 32.481170654296875, 130.9372100830078 31.047060012817383, 130.44960021972656 29.610824584960938, 129.97657775878906 28.17263412475586, 129.5171661376953 26.732620239257812, 129.0703582763672 25.29092025756836, 128.6353759765625 23.84765625, 128.2113494873047 22.402942657470703, 127.79757690429688 20.956890106201172, 127.39334869384766 19.50960350036621, 126.9980697631836 18.061172485351562, 126.61114501953125 16.611692428588867, 126.23198699951172 15.16125202178955, 125.86012268066406 13.709930419921875, 125.49507904052734 12.257804870605469, 125.13640594482422 10.804951667785645, 124.7836685180664 9.351444244384766, 124.43647766113281 7.897349834442139, 124.09449005126953 6.442732810974121, 123.75731658935547 4.987659931182861, 123.42463684082031 3.5321907997131348, 123.09613037109375 2.0763840675354004, 122.77149200439453 0.6202967166900635, 122.45044708251953 -0.836015522480011, 122.13270568847656 -2.2925007343292236, 121.81798553466797 -3.7491068840026855, 121.50604248046875 -5.205784797668457, 121.19662475585938 -6.662487030029297, 120.88947296142578 -8.119166374206543, 120.5843505859375 -9.575779914855957, 120.28102111816406 -11.032282829284668, 119.97925567626953 -12.48863410949707, 119.67880249023438 -13.944795608520508, 119.37944030761719 -15.400727272033691, 119.08094024658203 -16.85638999938965, 118.78304290771484 -18.311752319335938, 118.48553466796875 -19.76677703857422, 118.18815612792969 -21.221431732177734, 117.89066314697266 -22.675683975219727, 117.5927963256836 -24.129505157470703, 117.29428100585938 -25.582862854003906, 116.9948501586914 -27.035736083984375, 116.69418334960938 -28.488086700439453, 116.3919906616211 -29.939899444580078, 116.08795166015625 -31.391145706176758, 115.78170013427734 -32.841800689697266, 115.47286987304688 -34.291839599609375, 115.16104888916016 -35.74124526977539, 114.8458023071289 -37.189998626708984, 114.52664947509766 -38.638065338134766, 114.20306396484375 -40.08543395996094, 113.8744888305664 -41.532073974609375, 113.54026794433594 -42.97797775268555, 113.19972229003906 -44.423118591308594, 112.85202026367188 -45.86747360229492, 112.49630737304688 -47.31100845336914, 112.131591796875 -48.75371551513672, 112.05747985839844 -49.04215621948242, 110.10282897949219 -48.80724334716797, 108.16759490966797 -48.53953552246094, 106.25385284423828 -48.23965835571289, 104.36348724365234 -47.9083251953125, 102.4982681274414 -47.546180725097656, 100.65958404541016 -47.15413284301758, 98.84870910644531 -46.733009338378906, 97.06671142578125 -46.283660888671875, 97.21814727783203 -46.004638671875, 97.95366668701172 -44.606590270996094, 98.65504455566406 -43.203880310058594, 99.3252182006836 -41.7968864440918, 99.9666976928711 -40.38594436645508, 100.5819320678711 -38.97135543823242, 101.17300415039062 -37.55340576171875, 101.74182891845703 -36.13233184814453, 102.29004669189453 -34.70835494995117, 102.81927490234375 -33.28168487548828, 103.33094024658203 -31.85251235961914, 103.82630920410156 -30.421001434326172, 104.30651092529297 -28.987306594848633, 104.77267456054688 -27.551578521728516, 105.22576141357422 -26.113948822021484, 105.66667938232422 -24.67454719543457, 106.09622955322266 -23.233484268188477, 106.51520538330078 -21.790874481201172, 106.92430877685547 -20.346817016601562, 107.32420349121094 -18.901411056518555, 107.71543884277344 -17.454750061035156, 108.0986557006836 -16.006914138793945, 108.47433471679688 -14.557992935180664, 108.8429946899414 -13.108061790466309, 109.20504760742188 -11.657196044921875, 109.56096649169922 -10.205467224121094, 109.9111557006836 -8.752946853637695, 110.25597381591797 -7.299698829650879, 110.59579467773438 -5.845787525177002, 110.93096160888672 -4.391274929046631, 111.26181030273438 -2.936220645904541, 111.58863067626953 -1.4806820154190063, 111.9117202758789 -0.0247132498770952, 112.23138427734375 1.4316298961639404, 112.54788208007812 2.8882956504821777, 112.8614730834961 4.345233917236328, 113.17242431640625 5.802395820617676, 113.4809799194336 7.259734630584717, 113.78739166259766 8.717203140258789, 114.09188842773438 10.17475700378418, 114.39470672607422 11.632352828979492, 114.69609832763672 13.089950561523438, 114.99627685546875 14.547507286071777, 115.29549407958984 16.004985809326172, 115.5939712524414 17.46234703063965, 115.89196014404297 18.9195556640625, 116.18968200683594 20.37657356262207, 116.48739624023438 21.833370208740234, 116.78536987304688 23.28990936279297, 117.08384704589844 24.74616241455078, 117.38312530517578 26.20209312438965, 117.68346405029297 27.657678604125977, 117.98519134521484 29.112884521484375, 118.28860473632812 30.56768798828125, 118.59407043457031 32.022056579589844, 118.90191650390625 33.47596740722656, 119.21257019042969 34.92939758300781, 119.52644348144531 36.38231658935547, 119.84397888183594 37.83470153808594, 120.16568756103516 39.28653335571289, 120.49212646484375 40.73777770996094, 120.82390594482422 42.18842315673828, 121.16168975830078 43.638427734375, 121.50621795654297 45.08778381347656, 121.85836029052734 46.53645324707031, 122.21904754638672 47.984413146972656, 122.58934020996094 49.4316291809082, 122.970458984375 50.87807083129883, 123.36383819580078 52.323699951171875, 123.77105712890625 53.768470764160156, 124.19398498535156 55.21234130859375, 124.63477325439453 56.655250549316406, 125.09607696533203 58.097137451171875, 125.58085632324219 59.53791809082031, 126.09270477294922 60.97750473022461, 126.63600158691406 62.415775299072266, 127.21613311767578 63.85259246826172, 127.83952331542969 65.28778076171875, 128.51422119140625 66.72113037109375, 129.2503662109375 68.15234375, 130.06112670898438 69.58106994628906, 130.96310424804688 71.0068359375, 131.978271484375 72.42900085449219, 133.13623046875 73.84672546386719, 134.4783172607422 75.25880432128906, 136.06138610839844 76.66354370117188, 137.96847534179688 78.05848693847656, 140.3240509033203 79.4398422241211, 143.32493591308594 80.80152130126953, 147.2862091064453 82.13346862792969, 152.7455291748047 83.41777801513672, 160.64547729492188 84.62039184570312, 172.6173095703125 85.672119140625, -169.24298095703125 86.43745422363281, -145.14683532714844 86.71064758300781, -121.45512390136719 86.37869262695312, -104.03302001953125 85.57435607910156, -92.58141326904297 84.50215148925781, -84.98697662353516 83.28903198242188, -79.71389770507812 81.99873352050781, -75.87342834472656 80.66304016113281, -72.95154571533203 79.29896545410156, -70.64849090576172 77.91606140136719, -68.77903747558594 76.52003479003906, -67.2245101928711 75.11446380615234, -65.90384674072266 73.7017822265625, -64.76190948486328 72.28362274169922, -63.7593879699707 70.86112213134766))";
    // MODIS or VIIRS
//    static String poly = "POLYGON((-127.75914001464844 23.22995376586914,-156.89292907714844 18.848609924316406,-158.6620635986328 23.719249725341797,-128.3961181640625 28.26787757873535,-127.75914001464844 23.22995376586914))";

    public static void main(String[] args) throws ParseException {
        S2Polygon polygon = S2EoProduct.createPolygon(poly);
//        System.out.println("polygon = " + polygon);


        S2RegionCoverer coverer = new S2RegionCoverer();
        coverer.setMinLevel(0);
        coverer.setMaxLevel(5);
        coverer.setMaxCells(500);
        S2CellUnion covering = coverer.getCovering(polygon);

        final GeometryFactory factory = new GeometryFactory();
        List<S2CellId> s2CellIds = covering.cellIds();
        System.out.println("s2CellIds.size() = " + s2CellIds.size());
        List<Polygon> polys = new ArrayList<>();

        for (S2CellId s2CellId : s2CellIds) {
//            System.out.println("s2CellId = " + s2CellId);
            ArrayList<double[]> coordList = new ArrayList<double[]>();

            //System.out.println("s2CellId = " + s2CellId);
            S2Cell s2Cell = new S2Cell(s2CellId);
            //System.out.println("s2Cell = " + s2Cell);
            S2LatLng s2LatLng = new S2LatLng(s2Cell.getVertex(0));
            coordList.add(new double[]{s2LatLng.lat().degrees(), s2LatLng.lng().degrees()});

            s2LatLng = new S2LatLng(s2Cell.getVertex(1));
            coordList.add(new double[]{s2LatLng.lat().degrees(), s2LatLng.lng().degrees()});

            s2LatLng = new S2LatLng(s2Cell.getVertex(2));
            coordList.add(new double[]{s2LatLng.lat().degrees(), s2LatLng.lng().degrees()});

            s2LatLng = new S2LatLng(s2Cell.getVertex(3));
            coordList.add(new double[]{s2LatLng.lat().degrees(), s2LatLng.lng().degrees()});

            s2LatLng = new S2LatLng(s2Cell.getVertex(0));
            coordList.add(new double[]{s2LatLng.lat().degrees(), s2LatLng.lng().degrees()});

            final Coordinate[] coordinates = new Coordinate[coordList.size()];
            for (int i1 = 0; i1 < coordinates.length; i1++) {
                final double[] coord = coordList.get(i1);
                coordinates[i1] = new Coordinate(coord[1], coord[0]);
            }
            Polygon p = factory.createPolygon(factory.createLinearRing(coordinates));
            //System.out.println(p);
            polys.add(p);
        }
        MultiPolygon multiPolygon = factory.createMultiPolygon(polys.toArray(new Polygon[polys.size()]));

        Geometry simplify = TopologyPreservingSimplifier.simplify(multiPolygon, 0.01);
        System.out.println(multiPolygon);
        System.out.println(simplify);
        Geometry origin = new WKTReader().read(poly);
        Geometry both = multiPolygon.union(origin);
        System.out.println(both);

    }

}
